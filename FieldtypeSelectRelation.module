<?php

/**
 * ProcessWire Fieldtype Select Relation
 *
 * See README.md for usage instructions.
 *
 * ProcessWire 2.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * @author Tabea David <td@kf-interactive.com>
 * @version 0.0.3
 * @copyright Copyright (c) 2014 KF Interactive, www.kf-interactive.com, <info@kf-interactive.com>
 * @see https://github.com/justonestep/processwire-fieldtypeselectrelation
 * @see http://www.processwire.com
 *
 */

/**
 * Class FieldtypeSelectRelation
 */
class FieldtypeSelectRelation extends FieldtypeMulti {

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Select Relation',
      'version' => 003,
      'summary' => 'This Fieldtype creates a select list in relation to another field.',
      'href' => 'https://github.com/justonestep/processwire-fieldtypeselectrelation',
    );
  }

  /**
   * get config inputfields
   *
   * @param Field $fields
   */
  public function ___getConfigInputfields(Field $fields) {
    $inputfields = parent::___getConfigInputfields($fields);

    $chooseFieldField = $this->modules->get('InputfieldSelect');
    $chooseFieldField->label = 'Field';
    $chooseFieldField->attr('name', 'select_field_options');
    $chooseFieldField->attr('value', $fields->select_field_options);
    $chooseFieldField->description = $this->_('Select the field from which the select list should be populated.');
    $chooseFieldField->addOption('', '');
    $chooseFieldField->required = 1;
    $chooseFieldField->columnWidth = 25;
    foreach(wire('fields') as $field) {
      if (
        $field->type instanceof FieldFieldtypFieldFieldsetOpen
        || $field->type instanceof FieldFieldtypeFieldFieldsetClose
        || $field->type instanceof FieldFieldtypePassword
        || $field->type instanceof FieldFieldtypeRepeater
        || $field->type instanceof FieldFieldtypePage
        || $field->type instanceof FieldFieldtypeFile
        ) continue;

      $chooseFieldField->addOption($field->id, (!empty($field->label) ? $field->label . ' (' . $field->name . ')' : $field->name));
    }
    $inputfields->append($chooseFieldField);

    $chooseRepeaterField = $this->modules->get('InputfieldSelect');
    $chooseRepeaterField->label = 'Repeater';
    $chooseRepeaterField->attr('name', 'select_repeater_options');
    $chooseRepeaterField->attr('value', $fields->select_repeater_options);
    $chooseRepeaterField->description = $this->_('If the field you chose is included in a repeater, select the repeater here.');
    $chooseRepeaterField->columnWidth = 25;

    $chooseRepeaterField->addOption('', '');
    foreach(wire('fields') as $field) {
      if ($field->type instanceof FieldtypeRepeater) {
        $chooseRepeaterField->addOption($field->id, (!empty($field->label) ? $field->label . ' (' . $field->name . ')' : $field->name));
      }
    }
    $inputfields->append($chooseRepeaterField);

    $chooseTemplateField = $this->modules->get('InputfieldAsmSelect');
    $chooseTemplateField->label = 'Template(s)';
    $chooseTemplateField->attr('name', 'select_template_options');
    $chooseTemplateField->attr('value', $fields->select_template_options);
    $chooseTemplateField->description = 'Optional: Restrict your result by setting certain template(s).';
    $chooseTemplateField->columnWidth = 25;
    $chooseTemplateField->addOption('', '');
    foreach (wire('templates') as $template) {
      $chooseTemplateField->addOption($template->id, (!empty($template->label) ? $template->label : $template->name));
    }
    $inputfields->append($chooseTemplateField);

    $choosePagesField = $this->modules->get('InputfieldAsmSelect');
    $choosePagesField->label = 'Page(s)';
    $choosePagesField->attr('name', 'select_page_options');
    $choosePagesField->attr('value', $fields->select_page_options);
    $choosePagesField->description = 'Optional: Restrict your result by setting certain page(s).';
    $choosePagesField->columnWidth = 25;
    $choosePagesField->addOption('', '');
    $pa = $this->pages->find('has_parent!=2,id!=2|7,status<' . Page::statusTrash . ',include=all');
    foreach ($pa as $p) {
      if (!empty($p->name)) {
        $choosePagesField->addOption($p->id, $p->title);
      }
    }
    $inputfields->append($choosePagesField);

    $checkUseDistinctField = $this->modules->get('InputfieldCheckbox');
    $checkUseDistinctField->label = 'Enable unique values';
    $checkUseDistinctField->attr('name', 'use_distinct');
    $checkUseDistinctField->attr('checked', empty($fields->use_distinct) ? '' : 'checked');
    $checkUseDistinctField->description = 'Check this field if you want to avoid duplicate values.';
    $checkUseDistinctField->notes = 'If you enable this, the string value will be saved instead of the ID. You will not be able to reference via ID.';
    $checkUseDistinctField->columnWidth = 33;
    $inputfields->append($checkUseDistinctField);

    $checkIncludeAll = $this->modules->get('InputfieldCheckbox');
    $checkIncludeAll->label = 'Enable including not only visible pages';
    $checkIncludeAll->attr('name', 'include_all');
    $checkIncludeAll->attr('checked', empty($fields->include_all) ? '' : 'checked');
    $checkIncludeAll->description = 'Include all hidden and unpublished pages and pages that user doesn\'t have access to view.';
    $checkIncludeAll->columnWidth = 33;
    $inputfields->append($checkIncludeAll);

    $checkUseAsmSelect = $this->modules->get('InputfieldCheckbox');
    $checkUseAsmSelect->label = 'Enable multiple output';
    $checkUseAsmSelect->attr('name', 'use_asmselect');
    $checkUseAsmSelect->attr('checked', empty($fields->use_asmselect) ? '' : 'checked');
    $checkUseAsmSelect->description = 'Enable multiple selection (using ASMSelect).';
    $checkUseAsmSelect->columnWidth = 34;
    $inputfields->append($checkUseAsmSelect);

    return $inputfields;
  }


  /**
   * getInputfield - get basic fields and their database schema
   *
   * @param Page $page
   * @param Field $field
   */
  public function getInputfield(Page $page, Field $fields) {
    if (!empty($fields->select_field_options)) {
      $selector = array('has_parent!=2,id!=2|7');
      if ((int)$fields->include_all === 1) {
        $selector[] = 'include=all';
      }

      if (!empty($fields->select_template_options)) {
        $selector[] = 'templates_id=' . implode('|', $fields->select_template_options);
      }

      if (!empty($fields->select_page_options)) {
        $selector[] = 'id=' . implode('|', $fields->select_page_options);
      }

      $inputType = ((int)$fields->use_asmselect === 1) ? 'InputfieldAsmSelect' : 'InputfieldSelectMultiple';
      $inputfield = $this->modules->get($inputType);
      $inputfield->attr('name', $fields->name);

      if ($inputType === 'InputfieldSelectMultiple') {
        $inputfield->attr('size', 1);
        $inputfield->attr('multiple', false);
      }

      foreach ($this->pages->find(implode(',', $selector)) as $p) {
        if (!empty($fields->select_repeater_options)) {
          // it's an repeater
          if ($p->{$fields->select_repeater_options}) {
            foreach ($p->{$fields->select_repeater_options} as $r) {

              $value = '';
              if (is_array($r->{$fields->select_field_options}) && !empty($r->{$fields->select_field_options})) {
                $value = $this->sanitizer->text($r->{$fields->select_field_options}[0]);
              } elseif (!empty($r->{$fields->select_field_options})) {
                $value = $this->sanitizer->text($r->{$fields->select_field_options});
              }

              if ($value != '') {
                if ((int)$fields->use_distinct === 1) {
                  $inputfield->addOption($value, $value);
                } else {
                  $inputfield->addOption($r->id, $value);
                }
              }
            }
          }
        } else {
          $value = '';
          if (is_array($p->{$fields->select_field_options}) && !empty($p->{$fields->select_field_options})) {
            $value = $this->sanitizer->text($p->{$fields->select_field_options}[0]);
          } elseif (!empty($p->{$fields->select_field_options})) {

            if (wire('fields')->get($fields->select_field_options)->type instanceof \FieldtypeRepeater) {
              // field is a repeater
              foreach ($p->{$fields->select_field_options} as $rpage) {
                if ($rpage->status === 1) {
                  $values = array();
                  foreach ($rpage->fields as $ff) {
                    if (is_array($rpage->{$ff->name}) && !empty($rpage->{$ff->name})) {
                      $values[] = $rpage->{$ff->name}[0];
                    } else {
                      $values[] = $rpage->{$ff->name};
                    }
                  }

                  $val = $this->sanitizer->text(implode(', ', $values));
                  if ($val != '') {
                    if ((int)$fields->use_distinct === 1) {
                      $inputfield->addOption($val, $val);
                    } else {
                      $inputfield->addOption($rpage->id, $val);
                    }
                  }
                }
              }

            } else {
              $value = $this->sanitizer->text($p->{$fields->select_field_options});
            }
          }

          if ($value != '') {
            if ((int)$fields->use_distinct === 1) {
              $inputfield->addOption($value, $value);
            } else {
              $inputfield->addOption($p->id, $value);
            }
          }
        }
      }

      return $inputfield;
    }
  }

  /**
   * Return the DB schema used by this field's table
   *
   * @param Field $field
   */
  public function getDatabaseSchema(Field $field) {
    $schema = parent::getDatabaseSchema($field);
    $schema['data'] = 'text NOT NULL';
    $schema['keys']['data_exact'] = 'KEY `data_exact` (`data`(255))';
    $schema['keys']['data'] = 'FULLTEXT KEY data (data)';
    $schema['keys']['sort'] = 'KEY sort (pages_id, sort)';
    return $schema;
  }

  /**
   * get blank value
   *
   * @param Page $page
   * @param Field $field
   * @return array
   */
  public function getBlankValue(Page $page, Field $field) {
    return array();
  }

  /**
   * sanitize value
   *
   * @param Page $page
   * @param Field $field
   * @param array $value
   * @return array
   */
  public function sanitizeValue(Page $page, Field $field, $value) {
    if (!$value)
      return array();

    if (!is_array($value))
      $value = array($value);

    foreach ($value as $k => $v) {
      if (is_int($v)) {
        continue;
      } else {
        $value[$k] = trim($v);
      }
    }

    return $value;
  }

  /**
   * wakeup value
   *
   * @param Page $page
   * @param Field $field
   * @param array $value
   * @return array
   */
  public function ___wakeupValue(Page $page, Field $field, $value) {
    $v = $this->getBlankValue($page, $field);

    if (empty($value))
      return $v;

    foreach ($value as $val) {
      $v[] = $val;
    }

    return $v;
  }

  /**
   * sleep value
   *
   * @param Page $page
   * @param Field $field
   * @param array $value
   * @return array
   */
  public function ___sleepValue(Page $page, Field $field, $value) {
    $a = array();

    foreach ($value as $val) {
      if (is_int($val)) {
        $a[] = $val;
      } else {
        $a[] = trim($val);
      }
    }

    return $a;
  }

}
